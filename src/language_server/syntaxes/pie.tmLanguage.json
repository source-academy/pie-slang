{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Pie",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#atoms"
    },
    {
      "include": "#parens"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.semicolon.pie",
          "match": ";.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.tactics.pie",
          "match": "(?<![a-zA-Z0-9_-])(define-tactically|exact|intro|exists|elimNat|elimList|elimVec|elimEqual|elimEither|elimAbsurd|split)(?![a-zA-Z0-9_-])"
        },
        {
          "name": "keyword.control.pie",
          "match": "(?<![a-zA-Z0-9_-])(lambda|λ|Pi|Π|Sigma|Σ|define|claim|check-same|the|TODO)(?![a-zA-Z0-9_-])"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.pie",
          "match": "(?<![a-zA-Z0-9_-])(U|Universe|Nat|Atom|List|Vec|Either|Trivial|Absurd|Pair|=)(?<![a-zA-Z0-9_-])"
        },
        {
          "name": "storage.type.arrow.pie",
          "match": "(?<![a-zA-Z0-9_-])(->|→)(?<![a-zA-Z0-9_-])"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.constructor.pie",
          "match": "(?<![a-zA-Z0-9_-])(zero|add1|quote|nil|::|cons|left|right|vecnil|vec::|same|replace|trans|cong|symm)(?<![a-zA-Z0-9_-])"
        },
        {
          "name": "keyword.destructor.pie",
          "match": "(?<![a-zA-Z0-9_-])(which-Nat|iter-Nat|rec-Nat|ind-Nat|rec-List|ind-List|ind-Vec|ind-Absurd|car|cdr|ind-Either|ind-Vec|ind-=|)(?<![a-zA-Z0-9_-])"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.pie",
          "match": "\\b(zero|sole|nil|vecnil)\\b"
        },
        {
          "name": "constant.language.constructor.pie",
          "match": "\\b(add1|cons|car|cdr|left|right|same|quote)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.pie",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "atoms": {
      "patterns": [
        {
          "name": "constant.other.atom.pie",
          "match": "'[a-zA-Z][a-zA-Z0-9-_]*"
        }
      ]
    },
    "parens": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "meta.parens.pie",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.pie"
}
